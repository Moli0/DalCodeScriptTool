using Dapper;  
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;


namespace DAL 
{
     /// <summary>
    /// 数据表[{5}{0}]操作类
    /// 本类作者：Lin Moli [{1}]
    /// </summary>
    public partial class {0}DAL
	{
	    /// <summary>
		///构造函数
		/// </summary>
	    public {0}DAL(){}

		/// <summary>
		///添加一条数据（返回插入的数据的id）
		/// </summary>
		public int Add(Model.{0} model)
		{
		    string sqlStr = " insert into [{5}{0}]({2}) values({3});select @@identity ";
			using(var connection = ConnectionCode.GetConnection())
			{
			    return connection.Query<int>(sqlStr,model).SingleOrDefault();
			}
		}

		/// <summary>
		///一次添加多条数据（返回插入的行数）
		/// </summary>
		public int Adds(List<Model.{0}> model)
		{
		    string sqlStr = " insert into [{5}{0}]({2}) ";
			for(int i = 0;i<model.Count;i++)
			{
			    sqlStr += " select ";
				foreach(var a in model[i])
				{
				    sqlStr += " '" + a + "',";
				}
				sqlStr = sqlStr.Substring(0,sqlStr.Length-1);
			    if(i<model.count-1)
				{
				    sqlStr += " union all ";
				}
			}
			using(var connection = ConnectionCode.GetConnection())
			{
			    return connection.Execute(strSql);
			}
		}

		/// <summary>
		///根据id修改一条数据（返回修改结果）
		/// </summary>
		public bool Update(Model.{0} model)
		{
		    string sqlStr = " update [{5}{0}] set {4} where id = @id";
            using(var connection = ConnectionCode.GetConnection())
			{
			    return connection.Execute(sqlStr,model)>0;
			}
		}

		/// <summary>
		///根据条件修改数据（返回受影响的行数）
		/// </summary>
		public int Update(string field,string cond)
		{
		    string sqlStr = " update [{5}{0}] set "+ field +" where (1=2) ";
            if (!string.IsNullOrEmpty(cond))
            {
                strSql += " or " + cond;
            }
			using(var connection = ConnectionCode.GetConnection())
			{
			    return connection.Execute(sqlStr);
			}
		}

		/// <summary>
		///根据id删除一条数据（返回修改结果）
		/// </summary>
		public bool Delete(int id)
		{
		    string sqlStr = " delete [{5}{0}] where id = @id";
			using(var connection = ConnectionCode.GetConnection())
			{
			    return connection.Execute(sqlStr,new{ id = id })>0;
			}
		}

		/// <summary>
		///根据条件删除数据（返回受影响的行数）
		/// </summary>
		public int Delete(string cond)
		{
		    string sqlStr = " delete [{5}{0}] where (1=2) ";
            if (!string.IsNullOrEmpty(cond))
            {
                strSql += " or " + cond;
            }
			using(var connection = ConnectionCode.GetConnection())
			{
			    return connection.Execute(sqlStr);
			}
		}

		/// <summary>
		///根据id取得数据模型（返回一个Model）
		/// </summary>
		public Model.{0} GetModel(int id)
		{
		    string sqlStr = " select top 1 * from [{5}{0}] where id = @id ";
			using(var connection = ConnectionCode.GetConnection())
			{
			    return connection.Query<Model.{0}>(sqlStr,new{ id = id }).SingleOrDefault();
			}
		}

		/// <summary>
		///根据条件取得数据模型（返回一个Model）
		/// </summary>
		public Model.{0} GetModel(string cond)
		{
		    string sqlStr = " select top 1 * from [{5}{0}] where (1=1) ";
			if (!string.IsNullOrEmpty(cond))
            {
                strSql += " and " + cond;
            }
			using(var connection = ConnectionCode.GetConnection())
			{
			    return connection.Query<Model.{0}>(sqlStr).SingleOrDefault();
			}
		}

		/// <summary>
		///按条件取得模型列表（返回一个List<Model>）
		/// </summary>
		public List<Model.{0}> GetListModel(string cond)
		{
		    string sqlStr = " select * from [{5}{0}] where (1=1) ";
			if (!string.IsNullOrEmpty(cond))
            {
                strSql += " and " + cond;
            }
			using(var connection = ConnectionCode.GetConnection())
			{
			    return connection.Query<Model.{0}>(sqlStr).AsList();
			}
		}
		
		/// <summary>
		///按条件取一个字段的值（返回一个string）
		/// </summary>
		public string GetOneField(string field,string cond)
		{
			string sqlStr = " select top 1 "+ field +" from [{5}{0}] where (1=1) ";
			if (!string.IsNullOrEmpty(cond))
            {
                strSql += " and " + cond;
            }
			using(var connection = ConnectionCode.GetConnection())
			{
			    return connection.Query<string>(sqlStr).SingleOrDefault();
			}
		}

		/// <summary>
		///按条件取多个字段的值（返回一个Model）
		/// </summary>
		public Model.{0} GetFields(string fields,string cond)
		{
		    string sqlStr = " select top 1 "+ fields +" from [{5}{0}] where (1=1) ";
			if (!string.IsNullOrEmpty(cond))
            {
                strSql += " and " + cond;
            }
			using(var connection = ConnectionCode.GetConnection())
			{
			    return connection.Query<Model.{0} >(sqlStr).SingleOrDefault();
			}
		}

		/// <summary>
		///按条件取一个字段的列表（返回一个List<string>）
		/// </summary>
		public List<string> GetListField(string field,string cond)
		{
		    string sqlStr = " select "+ field +" from [{5}{0}] where (1=1) ";
			if (!string.IsNullOrEmpty(cond))
            {
                strSql += " and " + cond;
            }
			using(var connection = ConnectionCode.GetConnection())
			{
			    return connection.Query<string>(sqlStr).AsList();
			}
		}

		/// <summary>
		///按条件取多个字段的列表（返回一个List<model>）
		/// </summary>
		public List<string> GetListFields(string fields,string cond)
		{
		    string sqlStr = " select "+ fields +" from [{5}{0}] where (1=1) ";
			if (!string.IsNullOrEmpty(cond))
            {
                strSql += " and " + cond;
            }
			using(var connection = ConnectionCode.GetConnection())
			{
			    return connection.Query<Model.{0}>(sqlStr).AsList();
			}
		}
	}
}